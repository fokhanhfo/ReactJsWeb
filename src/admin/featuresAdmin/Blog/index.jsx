'use client';

import { useEffect, useState } from 'react';
import {
  Container,
  Typography,
  Button,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Box,
  IconButton,
  Alert,
  Snackbar,
} from '@mui/material';
import { Add, Edit, Delete, Visibility } from '@mui/icons-material';
import { useAddBlogMutation, useDeleteBlogMutation, useGetBlogsQuery, useUpdateBlogMutation } from 'hookApi/blogApi';
import { createChat } from '@n8n/chat';

const BlogManagement = () => {
  useEffect(() => {
    const initChat = async () => {
      try {
        await createChat({
          webhookUrl: 'http://localhost:5678/webhook/6ac1e069-d4b5-479b-867a-bee502647148/chat',
          webhookConfig: {
            method: 'POST',
            headers: {},
          },
          target: '#n8n-chat',
          mode: 'window',
          chatInputKey: 'chatInput',
          chatSessionKey: 'sessionId',
          loadPreviousSession: true,
          metadata: {},
          showWelcomeScreen: false,
          defaultLanguage: 'vi',
          initialMessages: [
            'üëã Xin ch√†o!',
            'B·∫°n mu·ªën t·∫°o b√†i vi·∫øt cho s·∫£n ph·∫©m n√†o kh√¥ng hay ch·ªâ l√† b√†i vi·∫øt v·ªÅ th·ªùi trang!',
          ],
          i18n: {
            vi: {
              title: 'üëã Xin ch√†o!',
              subtitle: 'C·ª≠a h√†ng Ho√†ng H·∫£i s·∫µn s√†ng ph·ª•c v·ª• 24/7.',
              footer: '',
              getStarted: 'B·∫Øt ƒë·∫ßu tr√≤ chuy·ªán',
              inputPlaceholder: 'Nh·∫≠p tin nh·∫Øn...',
            },
          },
        });
      } catch (error) {
        console.error('Error creating chat:', error);
      }
    };

    initChat();
  }, []);
  const { data, isLoading } = useGetBlogsQuery();
  const [deleteBlog] = useDeleteBlogMutation();
  const [addBlog] = useAddBlogMutation();
  const [updateBlog] = useUpdateBlogMutation();
  const [blogs, setBlogs] = useState([
    {
      id: 1,
      title: 'Xu h∆∞·ªõng th·ªùi trang Thu ƒê√¥ng 2024',
      content:
        'M√πa Thu ƒê√¥ng 2024 ƒëang ƒë·∫øn g·∫ßn v√† c√πng v·ªõi ƒë√≥ l√† nh·ªØng xu h∆∞·ªõng th·ªùi trang m·ªõi ƒë·∫ßy th√∫ v·ªã. NƒÉm nay, c√°c nh√† thi·∫øt k·∫ø t·∫≠p trung v√†o vi·ªác k·∫øt h·ª£p gi·ªØa s·ª± tho·∫£i m√°i v√† phong c√°ch, t·∫°o ra nh·ªØng b·ªô trang ph·ª•c v·ª´a ·∫•m √°p v·ª´a th·ªùi trang.',
      createdAt: '2024-11-15',
    },
    {
      id: 2,
      title: 'C√°ch ph·ªëi ƒë·ªì c√¥ng s·ªü chuy√™n nghi·ªáp',
      content:
        'Trang ph·ª•c c√¥ng s·ªü kh√¥ng ch·ªâ th·ªÉ hi·ªán s·ª± chuy√™n nghi·ªáp m√† c√≤n gi√∫p b·∫°n t·ª± tin h∆°n trong c√¥ng vi·ªác. Vi·ªác l·ª±a ch·ªçn v√† ph·ªëi ƒë·ªì c√¥ng s·ªü ph√π h·ª£p l√† m·ªôt ngh·ªá thu·∫≠t ƒë√≤i h·ªèi s·ª± tinh t·∫ø v√† hi·ªÉu bi·∫øt v·ªÅ th·ªùi trang.',
      createdAt: '2024-11-12',
    },
    {
      id: 3,
      title: 'Top 10 m√≥n ph·ª• ki·ªán kh√¥ng th·ªÉ thi·∫øu',
      content:
        'Ph·ª• ki·ªán ƒë√≥ng vai tr√≤ quan tr·ªçng trong vi·ªác ho√†n thi·ªán m·ªôt outfit. Ch√∫ng kh√¥ng ch·ªâ gi√∫p tƒÉng t√≠nh th·∫©m m·ªπ m√† c√≤n th·ªÉ hi·ªán phong c√°ch c√° nh√¢n c·ªßa ng∆∞·ªùi m·∫∑c.',
      createdAt: '2024-11-10',
    },
  ]);

  const [openDialog, setOpenDialog] = useState(false);
  const [openViewDialog, setOpenViewDialog] = useState(false);
  const [currentBlog, setCurrentBlog] = useState({
    id: null,
    title: '',
    content: '',
  });
  const [viewBlog, setViewBlog] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'success',
  });
  const [errors, setErrors] = useState({
    title: '',
    content: '',
  });

  const handleOpenDialog = (blog = null) => {
    if (blog) {
      setCurrentBlog({ ...blog });
      setIsEditing(true);
      setOpenDialog(true);
      setErrors({ title: '', content: '' });
    } else {
      setCurrentBlog({ id: null, title: '', content: '' });
      setIsEditing(false);
      setOpenDialog(true);
      setErrors({ title: '', content: '' });
    }
  };

  const handleCloseDialog = () => {
    setOpenDialog(false);
    setCurrentBlog({ id: null, title: '', content: '' });
    setIsEditing(false);
    setErrors({ title: '', content: '' });
  };

  const handleOpenViewDialog = (blog) => {
    setViewBlog(blog);
    setOpenViewDialog(true);
  };

  const handleCloseViewDialog = () => {
    setOpenViewDialog(false);
    setViewBlog(null);
  };

  const handleInputChange = (event) => {
    const { name, value } = event.target;
    setCurrentBlog({
      ...currentBlog,
      [name]: value,
    });
    setErrors({
      ...errors,
      [name]: '',
    });
  };

  const validateForm = () => {
    const { title, content } = currentBlog;
    const newErrors = {};

    if (!title.trim()) {
      newErrors.title = 'Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
    }

    if (!content.trim()) {
      newErrors.content = 'N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async () => {
    if (!validateForm()) {
      return;
    }

    try {
      if (isEditing) {
        // Update existing blog qua API
        await updateBlog({
          ...currentBlog,
        }).unwrap();
        setSnackbar({
          open: true,
          message: 'C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng!',
          severity: 'success',
        });
      } else {
        // Add new blog qua API
        await addBlog({
          ...currentBlog,
        }).unwrap();
        setSnackbar({
          open: true,
          message: 'Th√™m b√†i vi·∫øt th√†nh c√¥ng!',
          severity: 'success',
        });
      }
    } catch (err) {
      console.error(err);
      setSnackbar({
        open: true,
        message: 'C√≥ l·ªói x·∫£y ra',
        severity: 'error',
      });
    }

    handleCloseDialog();
  };

  const handleEdit = (blog) => {
    handleOpenDialog(blog);
  };

  const handleDelete = (blogId) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a b√†i vi·∫øt n√†y?')) {
      //   const updatedBlogs = blogs.filter((blog) => blog.id !== blogId);
      //   setBlogs(updatedBlogs);
      deleteBlog(blogId);
      setSnackbar({
        open: true,
        message: 'X√≥a b√†i vi·∫øt th√†nh c√¥ng!',
        severity: 'success',
      });
    }
  };

  const handleCloseSnackbar = () => {
    setSnackbar({
      ...snackbar,
      open: false,
    });
  };

  return (
    <Container maxWidth="lg" sx={{ py: 4 }}>
      {/* Header */}
      <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 4 }}>
        <Typography variant="h4" component="h1" sx={{ fontWeight: 'bold' }}>
          Qu·∫£n L√Ω Blog
        </Typography>
        <Button variant="contained" startIcon={<Add />} onClick={() => handleOpenDialog()}>
          Th√™m B√†i Vi·∫øt
        </Button>
      </Box>

      {/* Blog Table */}
      <TableContainer component={Paper}>
        <Table>
          <TableHead>
            <TableRow>
              <TableCell>ID</TableCell>
              <TableCell>Ti√™u ƒê·ªÅ</TableCell>
              <TableCell>N·ªôi Dung</TableCell>
              <TableCell>Ng√†y T·∫°o</TableCell>
              <TableCell align="center">Thao T√°c</TableCell>
            </TableRow>
          </TableHead>
          <TableBody>
            {data?.data.map((blog) => (
              <TableRow key={blog.id}>
                <TableCell>{blog.id}</TableCell>
                <TableCell>
                  <Typography variant="subtitle1" sx={{ fontWeight: 'medium' }}>
                    {blog.title}
                  </Typography>
                </TableCell>
                <TableCell>
                  <Typography variant="body2" sx={{ maxWidth: 300 }}>
                    {blog.content.length > 100 ? `${blog.content.substring(0, 100)}...` : blog.content}
                  </Typography>
                </TableCell>
                <TableCell>{blog.createdAt}</TableCell>
                <TableCell align="center">
                  <IconButton color="info" onClick={() => handleOpenViewDialog(blog)} title="Xem chi ti·∫øt">
                    <Visibility />
                  </IconButton>
                  <IconButton color="primary" onClick={() => handleEdit(blog)} title="Ch·ªânh s·ª≠a">
                    <Edit />
                  </IconButton>
                  <IconButton color="error" onClick={() => handleDelete(blog.id)} title="X√≥a">
                    <Delete />
                  </IconButton>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </TableContainer>

      {/* Add/Edit Dialog */}
      <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth="md" fullWidth>
        <DialogTitle>{isEditing ? 'Ch·ªânh S·ª≠a B√†i Vi·∫øt' : 'Th√™m B√†i Vi·∫øt M·ªõi'}</DialogTitle>
        <DialogContent>
          <Box sx={{ pt: 2 }}>
            <TextField
              fullWidth
              label="Ti√™u ƒë·ªÅ"
              name="title"
              value={currentBlog.title}
              onChange={handleInputChange}
              error={!!errors.title}
              helperText={errors.title}
              sx={{ mb: 3 }}
            />
            <TextField
              fullWidth
              label="N·ªôi dung"
              name="content"
              value={currentBlog.content}
              onChange={handleInputChange}
              multiline
              rows={8}
              error={!!errors.content}
              helperText={errors.content}
            />
            {/* <Box mb={3}>
              <CKEditorForm name="detail" lable="Chi ti·∫øt s·∫£n ph·∫©m" form={form} />
            </Box> */}
          </Box>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleCloseDialog}>H·ªßy</Button>
          <Button onClick={handleSubmit} variant="contained">
            {isEditing ? 'C·∫≠p Nh·∫≠t' : 'Th√™m M·ªõi'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* View Dialog */}
      <Dialog open={openViewDialog} onClose={handleCloseViewDialog} maxWidth="md" fullWidth>
        {viewBlog && (
          <>
            <DialogTitle>
              <Typography variant="h5">{viewBlog.title}</Typography>
              <Typography variant="caption" color="text.secondary">
                Ng√†y t·∫°o: {viewBlog.createdAt}
                {viewBlog.updatedAt && ` | C·∫≠p nh·∫≠t: ${viewBlog.updatedAt}`}
              </Typography>
            </DialogTitle>
            <DialogContent>
              <Typography variant="body1" sx={{ lineHeight: 1.8, whiteSpace: 'pre-line' }}>
                {viewBlog.content}
              </Typography>
            </DialogContent>
            <DialogActions>
              <Button onClick={handleCloseViewDialog}>ƒê√≥ng</Button>
              <Button onClick={() => handleEdit(viewBlog)} variant="contained" startIcon={<Edit />}>
                Ch·ªânh S·ª≠a
              </Button>
            </DialogActions>
          </>
        )}
      </Dialog>

      {/* Snackbar */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={3000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity} sx={{ width: '100%' }}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default BlogManagement;
